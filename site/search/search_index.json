{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"tags/","title":"\u0418\u043d\u0434\u0435\u043a\u0441 \u0442\u0435\u0433\u043e\u0432","text":""},{"location":"tags/#tag:css","title":"CSS","text":"<ul> <li>            Iae          </li> </ul>"},{"location":"tags/#tag:html5","title":"HTML5","text":"<ul> <li>            Iae          </li> </ul>"},{"location":"tags/#tag:javascript","title":"JavaScript","text":"<ul> <li>            Iae          </li> </ul>"},{"location":"pages/cat1/Creating%20your%20site/","title":"Creating your site","text":"<p>After you've installed Material for MkDocs, you can bootstrap your project documentation using the <code>mkdocs</code> executable. Go to the directory where you want your project to be located and enter:</p> <pre><code>mkdocs new .\n</code></pre> <p>Alternatively, if you're running Material for MkDocs from within Docker, use:</p> Unix, PowershellWindows (cmd) <pre><code>docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new .\n</code></pre> <pre><code>docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new .\n</code></pre> <p>This will create the following structure:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"pages/cat1/Creating%20your%20site/#configuration","title":"Configuration","text":""},{"location":"pages/cat1/Creating%20your%20site/#minimal-configuration","title":"Minimal configuration","text":"<p>Simply set the <code>site_name</code> and add the following lines to <code>mkdocs.yml</code> to enable the theme:</p> <pre><code>site_name: My site\nsite_url: https://mydomain.org/mysite\ntheme:\n  name: material\n</code></pre> <p>The <code>site_url</code> setting is important for a number of reasons. By default, MkDocs will assume that your site is hosted at the root of your domain. This is not the case, for example, when publishing to GitHub pages - unless you use a custom domain. Another reason is that some of the plugins require the <code>site_url</code> to be set, so you should always do this.</p> Recommended: configuration validation and auto-complete <p>In order to minimize friction and maximize productivity, Material for MkDocs provides its own schema.json[^1] for <code>mkdocs.yml</code>. If your editor supports YAML schema validation, it's definitely recommended to set it up:</p> Visual Studio CodeOther <ol> <li>Install <code>vscode-yaml</code> for YAML language support.</li> <li> <p>Add the schema under the <code>yaml.schemas</code> key in your user or     workspace <code>settings.json</code>:</p> <pre><code>{\n  \"yaml.schemas\": {\n    \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n  },\n  \"yaml.customTags\": [ // (1)!\n    \"!ENV scalar\",\n    \"!ENV sequence\",\n    \"!relative scalar\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n    \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\",\n    \"tag:yaml.org,2002:python/object/apply:pymdownx.slugs.slugify mapping\"\n  ]\n}\n</code></pre> <ol> <li>This setting is necessary if you plan to use icons and emojis,     or Visual Studio Code will show errors on certain lines.</li> </ol> </li> </ol> <ol> <li>Ensure your editor of choice has support for YAML schema validation.</li> <li> <p>Add the following lines at the top of <code>mkdocs.yml</code>:</p> <pre><code># yaml-language-server: $schema=https://squidfunk.github.io/mkdocs-material/schema.json\n</code></pre> </li> </ol> <p>[^1]:     If you're a MkDocs plugin or Markdown extension author and your project     works with Material for MkDocs, you're very much invited to contribute a     schema for your extension or plugin as part of a pull request on GitHub.     If you already have a schema defined, or wish to self-host your schema to     reduce duplication, you can add it via $ref.</p>"},{"location":"pages/cat1/Creating%20your%20site/#advanced-configuration","title":"Advanced configuration","text":"<p>Material for MkDocs comes with many configuration options. The setup section explains in great detail how to configure and customize colors, fonts, icons and much more:</p> <ul> <li>Changing the colors</li> <li>Changing the fonts</li> <li>Changing the language</li> <li>Changing the logo and icons</li> <li>Ensuring data privacy</li> <li>Setting up navigation</li> <li>Setting up site search</li> <li>Setting up site analytics</li> <li>Setting up social cards</li> <li>Setting up a blog</li> <li>Setting up tags</li> <li>Setting up versioning</li> <li>Setting up the header</li> <li>Setting up the footer</li> <li>Adding a git repository</li> <li>Adding a comment system</li> <li>Building an optimized site</li> <li>Building for offline usage</li> </ul> <p>Furthermore, see the list of supported Markdown extensions that are natively integrated with Material for MkDocs, delivering an unprecedented low-effort technical writing experience.</p>"},{"location":"pages/cat1/Creating%20your%20site/#templates","title":"Templates","text":"<p>If you want to jump start a new project, you can use one of our growing collection of templates:</p> <ul> <li> <p>:octicons-repo-template-24: \u00a0 Blog</p> <p>Create a blog</p> </li> <li> <p>:octicons-repo-template-24: \u00a0 Social cards</p> <p>Create documentation with social cards</p> </li> </ul>"},{"location":"pages/cat1/Creating%20your%20site/#previewing-as-you-write","title":"Previewing as you write","text":"<p>MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. Start it with:</p> <pre><code>mkdocs serve # (1)!\n</code></pre> <ol> <li> <p>If you have a large documentation project, it might take minutes until     MkDocs has rebuilt all pages for you to preview. If you're only interested     in the current page, the <code>--dirtyreload</code> flag will make     rebuilds much faster:</p> <pre><code>mkdocs serve --dirtyreload\n</code></pre> </li> </ol> <p>If you're running Material for MkDocs from within Docker, use:</p> Unix, PowershellWindows <pre><code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material\n</code></pre> <pre><code>docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material\n</code></pre> <p>Point your browser to localhost:8000 and you should see:</p> <p></p>"},{"location":"pages/cat1/Creating%20your%20site/#building-your-site","title":"Building your site","text":"<p>When you're finished editing, you can build a static site from your Markdown files with:</p> <pre><code>mkdocs build\n</code></pre> <p>If you're running Material for MkDocs from within Docker, use:</p> Unix, PowershellWindows <pre><code>docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build\n</code></pre> <pre><code>docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material build\n</code></pre> <p>The contents of this directory make up your project documentation. There's no need for operating a database or server, as it is completely self-contained. The site can be hosted on GitHub Pages, GitLab Pages, a CDN of your choice or your private web space.</p> <p>If you intend to distribute your documentation as a set of files to be read from a local filesystem rather than a web server (such as in a <code>.zip</code> file), please read the notes about building for offline usage.</p>"},{"location":"pages/cat1/Getting%20started/","title":"Getting started","text":"<p>Material for MkDocs is a powerful documentation framework on top of MkDocs, a static site generator for project documentation.[^1] If you're familiar with Python, you can install Material for MkDocs with <code>pip</code>, the Python package manager. If not, we recommend using <code>docker</code>.</p> <p>[^1]:     In 2016, Material for MkDocs started out as a simple theme for MkDocs, but     over the course of several years, it's now much more than that \u2013 with the     many built-in plugins, settings, and countless customization abilities,     Material for MkDocs is now one of the simplest and most powerful frameworks     for creating documentation for your project.</p>"},{"location":"pages/cat1/Getting%20started/#installation","title":"Installation","text":""},{"location":"pages/cat1/Getting%20started/#with-pip","title":"with pip recommended","text":"<p>Material for MkDocs is published as a Python package and can be installed with <code>pip</code>, ideally by using a virtual environment. Open up a terminal and install Material for MkDocs with:</p> Latest9.x <pre><code>pip install mkdocs-material\n</code></pre> <pre><code>pip install mkdocs-material==\"9.*\" # (1)!\n</code></pre> <ol> <li> <p>Material for MkDocs uses semantic versioning[^2], which is why it's a     good idea to limit upgrades to the current major version.</p> <p>This will make sure that you don't accidentally [upgrade to the next major version], which may include breaking changes that silently corrupt your site. Additionally, you can use <code>pip freeze</code> to create a lockfile, so builds are reproducible at all times:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Now, the lockfile can be used for installation:</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> </ol> <p>[^2]:     Note that improvements of existing features are sometimes released as     patch releases, like for example improved rendering of content tabs, as     they're not considered to be new features.</p> <p>This will automatically install compatible versions of all dependencies: MkDocs, Markdown, Pygments and Python Markdown Extensions. Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.</p> <p>:fontawesome-brands-youtube:{ style=\"color: #EE0F0F\" } How to set up Material for MkDocs by @james-willett \u2013 :octicons-clock-24: 27m \u2013 Learn how to create and host a documentation site using Material for MkDocs on GitHub Pages in a step-by-step guide.</p> <p>Tip</p> <p>If you don't have prior experience with Python, we recommend reading Using Python's pip to Manage Your Projects' Dependencies, which is a really good introduction on the mechanics of Python package management and helps you troubleshoot if you run into errors.</p>"},{"location":"pages/cat1/Getting%20started/#with-docker","title":"with docker","text":"<p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Open up a terminal and pull the image with:</p> Latest9.x <pre><code>docker pull squidfunk/mkdocs-material\n</code></pre> <pre><code>docker pull squidfunk/mkdocs-material:9\n</code></pre> <p>The <code>mkdocs</code> executable is provided as an entry point and <code>serve</code> is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections.</p> <p>The following plugins are bundled with the Docker image:</p> <ul> <li>mkdocs-minify-plugin</li> <li>mkdocs-redirects</li> </ul> Warning <p>The Docker container is intended for local previewing purposes only and is not suitable for deployment. This is because the web server used by MkDocs for live previews is not designed for production use and may have security vulnerabilities.</p> How to add plugins to the Docker image? <p>Material for MkDocs only bundles selected plugins in order to keep the size of the official image small. If the plugin you want to use is not included, you can add them easily:</p> Material for MkDocsInsiders <p>Create a <code>Dockerfile</code> and extend the official image:</p> Dockerfile<pre><code>FROM squidfunk/mkdocs-material\nRUN pip install mkdocs-macros-plugin\nRUN pip install mkdocs-glightbox\n</code></pre> <p>Clone or fork the Insiders repository, and create a file called <code>user-requirements.txt</code> in the root of the repository. Then, add the plugins that should be installed to the file, e.g.:</p> user-requirements.txt<pre><code>mkdocs-macros-plugin\nmkdocs-glightbox\n</code></pre> <p>Next, build the image with the following command:</p> <pre><code>docker build -t squidfunk/mkdocs-material .\n</code></pre> <p>The new image will have additional packages installed and can be used exactly like the official image.</p>"},{"location":"pages/cat1/Getting%20started/#with-git","title":"with git","text":"<p>Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material.git\n</code></pre> <p>Next, install the theme and its dependencies with:</p> <pre><code>pip install -e mkdocs-material\n</code></pre>"},{"location":"pages/cat1/cat1-1/iae/","title":"Iae","text":"<p>1</p>","tags":["HTML5","JavaScript","CSS"]},{"location":"pages/cat2/about/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"pages/cat2/about/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"pages/cat2/about/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}]}